from flask import Flask, request, jsonify, render_template
import mysql.connector
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import hashlib
import base64
import os
import threading
import time

app = Flask(__name__)

# üîπ Configuration des bases de donn√©es
DB_CONFIG = {
    "smarttech": {
        "host": "localhost",
        "user": "MatarCoume",
        "password": "passer",
        "database": "smarttech"
    },
    "vmail": {
        "host": "localhost",
        "user": "MatarCoume",
        "password": "passer",
        "database": "vmail"
    },
    "roundcubemail": {
        "host": "localhost",
        "user": "MatarCoume",
        "password": "passer",
        "database": "roundcubemail"
    }
}

# üîπ Configuration de l'email
EMAIL_CONFIG = {
    "host": "mail.smarttech.sn",
    "port": 587,
    "address": "postmaster@ucad.sn",
    "password": "coume090603"
}

# üîπ Connexion √† une base de donn√©es sp√©cifique
def connecter_db(nom_db):
    return mysql.connector.connect(**DB_CONFIG[nom_db])

# üîπ Hachage du mot de passe (pour la cr√©ation d'utilisateurs)
def hacher_mot_de_passe(mot_de_passe):
    salt = base64.b64encode(hashlib.sha256().digest()).decode('utf-8')[:16]
    hachage = hashlib.sha512((mot_de_passe + salt).encode()).hexdigest()
    return f"{{SSHA512}}{hachage}{salt}"

# üîπ Envoyer un email
def envoyer_email(destinataire, sujet, contenu):
    message = MIMEMultipart()
    message["From"] = EMAIL_CONFIG["address"]
    message["To"] = destinataire
    message["Subject"] = sujet
    message.attach(MIMEText(contenu, "plain"))

    try:
        with smtplib.SMTP(EMAIL_CONFIG["host"], EMAIL_CONFIG["port"]) as serveur:
            serveur.starttls()
            serveur.login(EMAIL_CONFIG["address"], EMAIL_CONFIG["password"])
            serveur.sendmail(EMAIL_CONFIG["address"], destinataire, message.as_string())
        print(f"‚úÖ E-mail envoy√© √† {destinataire}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi de l'email : {e}")

# üîπ Cr√©er un compte email pour un employ√©
def creer_compte_email(email, mot_de_passe):
    try:
        # Connexion √† la base de donn√©es vmail
        conn_vmail = connecter_db("vmail")
        cursor_vmail = conn_vmail.cursor()

        # V√©rifier si l'utilisateur existe d√©j√†
        cursor_vmail.execute("SELECT username FROM mailbox WHERE username = %s", (email,))
        if cursor_vmail.fetchone():
            print(f"‚ùå Le compte email {email} existe d√©j√†.")
            return

        # Hachage du mot de passe
        mot_de_passe_hache = hacher_mot_de_passe(mot_de_passe)

        # Insertion dans mailbox
        nom_utilisateur = email.split('@')[0]
        domaine_utilisateur = email.split('@')[1]
        maildir = f"{domaine_utilisateur}/{nom_utilisateur}/"
        cursor_vmail.execute(
            "INSERT INTO mailbox (username, password, name, language, maildir, domain) VALUES (%s, %s, %s, %s, %s, %s)",
            (email, mot_de_passe_hache, nom_utilisateur, 'fr_FR', maildir, domaine_utilisateur)
        )
        conn_vmail.commit()
        cursor_vmail.close()
        conn_vmail.close()

        # Connexion √† la base de donn√©es roundcubemail
        conn_roundcube = connecter_db("roundcubemail")
        cursor_roundcube = conn_roundcube.cursor()

        # Insertion dans users
        cursor_roundcube.execute(
            "INSERT INTO users (username, mail_host, created) VALUES (%s, %s, NOW())",
            (email, domaine_utilisateur)
        )
        conn_roundcube.commit()

        # R√©cup√©rer l'user_id
        cursor_roundcube.execute("SELECT user_id FROM users WHERE username = %s", (email,))
        user_id = cursor_roundcube.fetchone()[0]

        # Insertion dans identities
        cursor_roundcube.execute(
            "INSERT INTO identities (user_id, changed, del, standard, name, organization, email, `reply-to`, bcc, signature, html_signature) "
            "VALUES (%s, NOW(), 0, 1, %s, '', %s, '', '', NULL, 0)",
            (user_id, nom_utilisateur, email)
        )
        conn_roundcube.commit()
        cursor_roundcube.close()
        conn_roundcube.close()

        print(f"‚úÖ Compte email cr√©√© pour {email}")
    except mysql.connector.Error as e:
        print(f"‚ùå Erreur lors de la cr√©ation du compte email : {e}")

# üîπ Surveillance de r√©pertoire
class SurveilleurFTP(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            fichier = event.src_path
            # Ignorer les fichiers temporaires (.filepart)
            if fichier.endswith('.filepart'):
                return

            print(f"üìÇ Nouveau fichier d√©tect√© : {fichier}")
            employe = choisir_employe()
            if employe:
                enregistrer_fichier(fichier, employe['id'])
                envoyer_email(employe['email'], "Nouveau fichier assign√©", f"Un nouveau fichier vous a √©t√© assign√© : {fichier}")

def choisir_employe():
    conn = connecter_db("smarttech")
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT id, nom, prenom, email FROM employe")
    employes = cursor.fetchall()
    cursor.close()
    conn.close()

    print("S√©lectionnez un employ√© pour ce fichier :")
    for emp in employes:
        print(f"{emp['id']}: {emp['prenom']} {emp['nom']} ({emp['email']})")
    
    emp_id = int(input("Entrez l'ID de l'employ√© : "))
    employe = next((e for e in employes if e['id'] == emp_id), None)
    return employe

def enregistrer_fichier(fichier, employe_id):
    conn = connecter_db("smarttech")
    cursor = conn.cursor()
    query = "INSERT INTO documents (nom, date_creation, employe_id) VALUES (%s, NOW(), %s)"
    valeurs = (os.path.basename(fichier), employe_id)
    
    try:
        cursor.execute(query, valeurs)
        conn.commit()
        print(f"‚úÖ Fichier {fichier} enregistr√© dans la base de donn√©es.")
    except mysql.connector.Error as err:
        print(f"‚ùå Erreur MySQL : {err}")
    finally:
        cursor.close()
        conn.close()

# üîπ D√©marrer la surveillance de r√©pertoire
def demarrer_surveillance():
    dossier_surveille = "/home/ftpuser/ftp"
    event_handler = SurveilleurFTP()
    observer = Observer()
    observer.schedule(event_handler, dossier_surveille, recursive=True)
    observer.start()
    print(f"üîç Surveillance du r√©pertoire : {dossier_surveille}")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# üîπ Routes de l'API Flask
@app.route('/')
def home():
    return render_template('smarttech.html')

@app.route('/api/<table>', methods=['GET'])
def lire_donnees(table):
    conn = connecter_db("smarttech")
    cursor = conn.cursor(dictionary=True)
    cursor.execute(f"SELECT * FROM {table}")
    resultats = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(resultats)

@app.route('/api/<table>/<int:id>', methods=['GET'])
def lire_une_donnee(table, id):
    conn = connecter_db("smarttech")
    cursor = conn.cursor(dictionary=True)
    cursor.execute(f"SELECT * FROM {table} WHERE id = %s", (id,))
    resultat = cursor.fetchone()
    cursor.close()
    conn.close()
    return jsonify(resultat or {})

@app.route('/api/<table>', methods=['POST'])
def creer_donnee(table):
    conn = connecter_db("smarttech")
    cursor = conn.cursor()
    data = request.json
    
    colonnes = ', '.join(data.keys())
    valeurs = tuple(data.values())
    placeholders = ', '.join(['%s'] * len(valeurs))
    
    query = f"INSERT INTO {table} ({colonnes}) VALUES ({placeholders})"
    
    try:
        cursor.execute(query, valeurs)
        conn.commit()
    except mysql.connector.Error as err:
        conn.rollback()
        return jsonify({"error": str(err)}), 500
    finally:
        cursor.close()
        conn.close()

    # Si la table est "employe", cr√©er un compte email
    if table == "employe" and "email" in data:
        creer_compte_email(data["email"], "motdepasse_par_defaut")  # Mot de passe par d√©faut

    return jsonify({"message": "Donn√©e ajout√©e avec succ√®s!"})

@app.route('/api/<table>/<int:id>', methods=['PUT'])
def mettre_a_jour_donnee(table, id):
    conn = connecter_db("smarttech")
    cursor = conn.cursor()
    data = request.json

    set_clause = ', '.join([f"{col} = %s" for col in data.keys()])
    valeurs = tuple(data.values()) + (id,)

    query = f"UPDATE {table} SET {set_clause} WHERE id = %s"

    try:
        cursor.execute(query, valeurs)
        conn.commit()
    except mysql.connector.Error as err:
        conn.rollback()
        return jsonify({"error": str(err)}), 500
    finally:
        cursor.close()
        conn.close()

    return jsonify({"message": "Mise √† jour r√©ussie!"})

@app.route('/api/<table>/<int:id>', methods=['DELETE'])
def supprimer_donnee(table, id):
    conn = connecter_db("smarttech")
    cursor = conn.cursor()
    query = f"DELETE FROM {table} WHERE id = %s"

    try:
        cursor.execute(query, (id,))
        conn.commit()
    except mysql.connector.Error as err:
        conn.rollback()
        return jsonify({"error": str(err)}), 500
    finally:
        cursor.close()
        conn.close()

    return jsonify({"message": "Suppression r√©ussie!"})

# üîπ D√©marrer l'application Flask
if __name__ == "__main__":
    # D√©marrer la surveillance de r√©pertoire dans un thread s√©par√©
    surveillance_thread = threading.Thread(target=demarrer_surveillance)
    surveillance_thread.daemon = True
    surveillance_thread.start()

    # D√©marrer l'application Flask
    app.run(host="0.0.0.0", port=5000, debug=True)
